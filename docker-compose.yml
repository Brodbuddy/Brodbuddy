services:
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=${APPOPTIONS__POSTGRES__USERNAME:-user}
      - POSTGRES_PASSWORD=${APPOPTIONS__POSTGRES__PASSWORD:-pass}
      - POSTGRES_DB=${APPOPTIONS__POSTGRES__DATABASE:-db}
    ports:
      - '${APPOPTIONS__POSTGRES__PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${APPOPTIONS__POSTGRES__USERNAME:-user} -d ${APPOPTIONS__POSTGRES__DATABASE:-db}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    mem_limit: 1g
    mem_reservation: 512m
  
  flyway:
    image: flyway/flyway:latest
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    environment:
      FLYWAY_URL: jdbc:postgresql://postgres:5432/${APPOPTIONS__POSTGRES__DATABASE:-db}
      FLYWAY_USER: ${APPOPTIONS__POSTGRES__USERNAME:-user}
      FLYWAY_PASSWORD: ${APPOPTIONS__POSTGRES__PASSWORD:-pass}
      FLYWAY_CONNECT_RETRIES: 5
      FLYWAY_LOCATIONS: filesystem:/flyway/sql
    volumes:
      - ./db/migrations:/flyway/sql
    command: migrate
  
  dragonfly:
    image: docker.dragonflydb.io/dragonflydb/dragonfly
    ulimits:
      memlock: -1
    ports:
      - '${APPOPTIONS__DRAGONFLY__PORT:-6379}:6379'
    volumes:
      - dragonflydata:/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    command: [
      "dragonfly",
      "--logtostderr",
      "--maxmemory=512mb",     
      "--proactor_threads=2"
    ]
    mem_limit: 512m
    mem_reservation: 384m
  
  mailhog:
    image: mailhog/mailhog
    ports:
      - '1025:1025'
      - '8025:8025'
    restart: unless-stopped
    profiles: ["dev", "staging"]
  
  seq:
    image: datalust/seq
    environment:
      - ACCEPT_EULA=Y
    ports:
      - '5341:80'
    volumes:
      - seq_data:/data
    restart: unless-stopped
    mem_limit: 256m        
    mem_reservation: 128m 
  
  zipkin:
    image: openzipkin/zipkin:latest
    environment:
      - ZIPKIN_UI_BASEPATH=/zipkin
    ports:
      - '9411:9411'
    restart: unless-stopped
    mem_limit: 256m        
    mem_reservation: 128m  
  
  vernemq:
    image: vernemq/vernemq
    ports:
      - "${APPOPTIONS__MQTT__MQTTPORT:-1883}:1883"     
      - "${APPOPTIONS__MQTT__WEBSOCKETPORT:-8080}:8080" 
    environment:
      - DOCKER_VERNEMQ_ACCEPT_EULA=yes      
      - DOCKER_VERNEMQ_ALLOW_ANONYMOUS=off  
      - DOCKER_VERNEMQ_USER_${APPOPTIONS__MQTT__USERNAME:-user}=${APPOPTIONS__MQTT__PASSWORD:-pass}
      - DOCKER_VERNEMQ_LOG__CONSOLE__LEVEL=warning
      - DOCKER_VERNEMQ_LISTENER__TCP__DEFAULT__MAX_CONNECTIONS=1000
    volumes:
      - vernemq-data:/vernemq/data
      - vernemq-log:/vernemq/log
      - vernemq-etc:/vernemq/etc
    restart: unless-stopped 
    healthcheck:
      test: [ "CMD-SHELL", "vernemq ping | grep -q pong" ]
      interval: 10s
      timeout: 5s
      retries: 5
    mem_limit: 256m
    mem_reservation: 128m
  
  backend:
    image: ${SERVER_IMAGE_TAG:-ghcr.io/brodbuddy/brodbuddy-backend:latest}
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      dragonfly:
        condition: service_healthy
      vernemq:
        condition: service_healthy
    volumes:
      - ./firmware:/app/firmware
    profiles: ["staging", "production"]
    mem_limit: 768m
    mem_reservation: 384m

  frontend:
    image: ${CLIENT_IMAGE_TAG:-ghcr.io/brodbuddy/brodbuddy-frontend:latest}
    environment:
      - VITE_HTTP_URL=${VITE_HTTP_URL}
      - VITE_WS_URL=${VITE_WS_URL}
    restart: unless-stopped
    profiles: ["staging", "production"]
    mem_limit: 128m
    mem_reservation: 64m
  
  nginx:
    image: nginx:stable-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Mount directory hvor config fil bliver placeret efter deploy
      - type: bind
        source: ./nginx_config # Host path relativt til docker-compose.yml
        target: /etc/nginx/conf.d # Inde i container
        read_only: true
      # Mount Nginx logs
      - type: volume
        source: nginx_logs
        target: /var/log/nginx
      # Mount Let's Encrypt certifikater for SSL
      - type: bind
        source: /etc/letsencrypt
        target: /etc/letsencrypt
        read_only: true
    depends_on:
      backend:
        condition: service_started 
      frontend:
        condition: service_started
    profiles: ["staging", "production"]
    mem_limit: 64m    
    mem_reservation: 32m

volumes:
  postgres_data:
  dragonflydata:
  vernemq-data:
  vernemq-log:  
  vernemq-etc:
  seq_data:
  nginx_logs: