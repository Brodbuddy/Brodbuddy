name: CI/CD Pipeline

on:
  push:
    paths:
      - 'server/**'
      - 'client/**'
      - 'PlaywrightTests/**'
      - 'Directory.Build.props'
      - '.github/**'
    branches:
      - '**'

jobs:
  continuous-integration:
    name: Continuous integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install .NET tools
        run: |
          dotnet tool install -g dotnet-sonarscanner
          dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Initialize SonarQube analysis
        # Kan ikke køre SonarQube ordentlig på flere branches hvis man har Community Edition og Developer koster 500$ om året
        # SonarQube community kan heller ikke køre på PR
        if: (github.ref == 'refs/heads/master')
        env:
          SONARQUBE_PROJECT_KEY: ${{ vars.SONARQUBE_PROJECT_KEY }}
          SONARQUBE_SERVER: ${{ vars.SONARQUBE_SERVER }}
          SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_PR_NUMBER: ${{ github.event.pull_request.number || '' }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_BASE_REF: ${{ github.base_ref }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          chmod +x .github/scripts/sonarqube_config.py
          python .github/scripts/sonarqube_config.py

      - name: Cache NuGet packages
        uses: actions/cache@v4
        id: cache-nuget
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-v1-${{ hashFiles('**/nuget.config', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-v1-

      - name: Set up NuGet Authentication for GitHub Packages
        run: |
          echo "GITHUB_USERNAME=${{ github.actor }}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Run .NET tests
        run: |
          chmod +x .github/scripts/run_dotnet_tests.py
          python .github/scripts/run_dotnet_tests.py

      - name: Generate test summary
        if: always()
        run: |
          chmod +x .github/scripts/generate_test_summary.py
          python .github/scripts/generate_test_summary.py

      - name: Generate code coverage report
        if: always()
        run: |
          chmod +x .github/scripts/generate_coverage_report.py
          python .github/scripts/generate_coverage_report.py

      - name: Complete SonarQube analysis
        if: always() && (github.ref == 'refs/heads/master')
        run: |
          dotnet sonarscanner end \
          /d:sonar.token="${{ secrets.SONARQUBE_TOKEN }}"

      - name: Install Python dependencies # Skal bruges i 'Generate SonarQube Summary' for at hente data fra SonarQube server
        if: always() && (github.ref == 'refs/heads/master')
        run: pip install requests

      - name: Generate SonarQube Summary
        if: always() && (github.ref == 'refs/heads/master')
        env:
          SONARQUBE_SERVER: ${{ vars.SONARQUBE_SERVER }}
          SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONARQUBE_PROJECT_KEY: ${{ vars.SONARQUBE_PROJECT_KEY }}
        run: |
          chmod +x .github/scripts/generate_sonarqube_summary.py
          python .github/scripts/generate_sonarqube_summary.py

      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-report
          path: '**/TestResults/*.html'
          retention-days: 7

      - name: Upload code coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report
          retention-days: 7

  mutation-tests:
    name: Running mutation tests
    strategy:
      matrix:
        include:
          - project_dir: 'server/Infrastructure.Data'
            project: 'Infrastructure.Data.csproj'
            test_project: '../tests/Infrastructure.Data.Tests/Infrastructure.Data.Tests.csproj'
          - project_dir: 'server/Infrastructure.Communication'
            project: 'Infrastructure.Communication.csproj'
            test_project: '../tests/Infrastructure.Communication.Tests/Infrastructure.Communication.Tests.csproj'
          - project_dir: 'server/Infrastructure.Monitoring'
            project: 'Infrastructure.Monitoring.csproj'
            test_project: '../tests/Infrastructure.Monitoring.Tests/Infrastructure.Monitoring.Tests.csproj'
          - project_dir: 'server/Application'
            project: 'Application.csproj'
            test_project: '../tests/Application.Tests/Application.Tests.csproj'
          - project_dir: 'server/Core'
            project: 'Core.csproj'
            test_project: '../tests/Core.Tests/Core.Tests.csproj'
          - project_dir: 'server/Api.Mqtt'
            project: 'Api.Mqtt.csproj'
            test_project: '../tests/Api.Mqtt.Tests/Api.Mqtt.Tests.csproj'
          - project_dir: 'server/Api.Http'
            project: 'Api.Http.csproj'
            test_project: '../tests/Api.Http.Tests/Api.Http.Tests.csproj'
          - project_dir: 'server/Api.Websocket'
            project: 'Api.Websocket.csproj'
            test_project: '../tests/Api.Websocket.Tests/Api.Websocket.Tests.csproj'
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install .NET tools
        run: |
          dotnet tool install -g dotnet-stryker 

      - name: Cache NuGet packages
        uses: actions/cache@v4
        id: cache-nuget
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-v1-${{ hashFiles('**/nuget.config', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-v1-

      - name: Set up NuGet Authentication for GitHub Packages
        run: |
          echo "GITHUB_USERNAME=${{ github.actor }}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Run Stryker mutation tests
        # Har ikke threshold med her for at kunne få summary
        # Men se sidste trin i dette som tjekker for om vi rammer 80%
        run: |
          PROJECT_DIR=$(dirname "${{ matrix.project }}")
          PROJECT_NAME=$(basename "${{ matrix.project_dir }}")
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          CORE_COUNT=$(nproc)
          echo "Detected $CORE_COUNT cores"
          SAFE_NAME=$(echo "${{ matrix.project }}" | tr '/' '_')
          OUTPUT_DIR="${GITHUB_WORKSPACE}/StrykerOutput_${SAFE_NAME}"
          echo "OUTPUT_DIR=${OUTPUT_DIR}" >> $GITHUB_ENV
          cd ${{ matrix.project_dir }}
          dotnet stryker \
            --project ${{ matrix.project }} \
            --test-project ${{ matrix.test_project }} \
            --output "${OUTPUT_DIR}" \
            --concurrency $CORE_COUNT \
            --reporter "json" \
            --reporter "html" \
            --config-file "${GITHUB_WORKSPACE}/stryker-config.json" \
            | tee "${GITHUB_WORKSPACE}/stryker-output-${SAFE_NAME}.log"

      - name: Upload Stryker JSON report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mutation-json-report-${{ strategy.job-index }}
          path: ${{ env.OUTPUT_DIR }}/reports/mutation-report.json
          retention-days: 1 # Skal kun bruges til næste job

      - name: Upload Stryker HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: stryker-html-report-${{ env.PROJECT_NAME }}
          path: ${{ env.OUTPUT_DIR }}/reports/mutation-report.html
          retention-days: 7
  
  aggregate-mutation-results:
    name: Aggregating mutation results
    runs-on: ubuntu-latest
    needs: mutation-tests
    if: always() # For at få overordnet summary tabel selvom en fejler
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all JSON reports
        uses: actions/download-artifact@v4
        with:
          pattern: mutation-json-report-*
          path: all-mutation-reports

      - name: List downloaded files
        run: ls -R all-mutation-reports

      - name: Aggregate reports and generate final summary
        id: aggregate
        run: |
          chmod +x .github/scripts/aggregate_mutation_summary.py
          python .github/scripts/aggregate_mutation_summary.py ./all-mutation-reports

      - name: Check final mutation threshold (80%)
        env:
          FINAL_MUTATION_SCORE: ${{ env.MUTATION_SCORE_FLOAT }}
        run: |
          echo "Checking final mutation score: $FINAL_MUTATION_SCORE%"
          if [[ -z "$FINAL_MUTATION_SCORE" ]]; then
            echo "::error::Could not determine final mutation score float value."
            exit 1
          fi
          if (( $(echo "$FINAL_MUTATION_SCORE < 80" | bc -l) )); then
            echo "::error::Overall Mutation score ($FINAL_MUTATION_SCORE%) is below threshold (80%)"
            exit 1
          else
            echo "Overall Mutation score ($FINAL_MUTATION_SCORE%) meets or exceeds threshold requirement (80%)"
          fi
  
  build-iot-firmware:
    name: Build IoT firmware
    runs-on: ubuntu-latest
    if: success() && (github.ref == 'refs/heads/master')
    needs: [ aggregate-mutation-results, continuous-integration ]
    outputs:
      iot_firmware_artifact_name: ${{ steps.build-iot.outputs.firmware_artifact_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set variables
        id: vars
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Install PlatformIO
        run: pip install platformio

      - name: Build IoT firmware
        id: build-iot
        run: |
          pio run -d iot/ -e dfrobot_firebeetle2_esp32e
          FIRMWARE_PATH=$(find iot/.pio/build/dfrobot_firebeetle2_esp32e/ -name 'firmware.bin' -print -quit)
          if [ -z "$FIRMWARE_PATH" ]; then echo "::error::Firmware.bin not found!"; exit 1; fi
          FIRMWARE_TARGET_NAME="firmware-${{ steps.vars.outputs.sha }}.bin"
          cp "$FIRMWARE_PATH" "$FIRMWARE_TARGET_NAME"
          echo "firmware_artifact_name=${FIRMWARE_TARGET_NAME}" >> $GITHUB_OUTPUT 

      - name: Upload IoT firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: iot-firmware-${{ steps.vars.outputs.sha }}
          path: ${{ steps.build-iot.outputs.firmware_artifact_name }}
          retention-days: 7
  
  build-backend-image:
    name: Build backend Docker image
    runs-on: ubuntu-latest
    if: success() && (github.ref == 'refs/heads/master')
    needs: [ aggregate-mutation-results, continuous-integration ]
    permissions:
      contents: read
      packages: write
    outputs:
      server_image_ci_tag: ${{ steps.build-push-docker.outputs.server_image_ci_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set variables
        id: vars
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository name
        id: repo-name
        run: echo "REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and push Docker image
        id: build-push-docker
        env:
          REPO_NAME: ${{ env.REPO_NAME }}
          TAG: ${{ steps.vars.outputs.sha }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker build --secret id=github_token,env=GITHUB_TOKEN \
            --build-arg GITHUB_USERNAME=${{ github.actor }} \
            -t ghcr.io/${REPO_NAME}-backend:${TAG} \
            -f server/Startup/Dockerfile .
          docker push ghcr.io/${REPO_NAME}-backend:${TAG}
          
          echo "server_image_ci_tag=ghcr.io/${REPO_NAME}-backend:${TAG}" >> $GITHUB_OUTPUT
  
  build-frontend-image:
    name: Build frontend Docker image
    runs-on: ubuntu-latest
    if: success() && (github.ref == 'refs/heads/master')
    needs: [ aggregate-mutation-results, continuous-integration ]
    permissions:
      contents: read
      packages: write
    outputs:
      client_image_ci_tag: ${{ steps.build-push-docker.outputs.client_image_ci_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set variables
        id: vars
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository name
        id: repo-name
        run: echo "REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and push Docker image
        id: build-push-docker
        env:
          REPO_NAME: ${{ env.REPO_NAME }}
          TAG: ${{ steps.vars.outputs.sha }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker build -t ghcr.io/${REPO_NAME}-frontend:${TAG} -f client/Dockerfile .
          docker push ghcr.io/${REPO_NAME}-frontend:${TAG}
          
          echo "client_image_ci_tag=ghcr.io/${REPO_NAME}-frontend:${TAG}" >> $GITHUB_OUTPUT

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [ build-iot-firmware, build-backend-image, build-frontend-image ]
    if: success() && (github.ref == 'refs/heads/master')
    environment:
      name: staging
      url: http://${{ vars.DOMAIN_NAME }} 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        id: create-dotenv
        run: |
          echo "Creating .env file..."
          cat > .env << EOL
          # --- Frontend environment variables ---
          VITE_HTTP_URL=${{ vars.VITE_HTTP_URL }}
          VITE_WS_URL=${{ vars.VITE_WS_URL }}
          # --- General App Settings ---
          APPOPTIONS__PUBLICPORT=${{ vars.APPOPTIONS__PUBLICPORT }}
          # --- HTTP ---
          APPOPTIONS__HTTP__PORT=${{ vars.APPOPTIONS__HTTP__PORT }}
          # --- Websocket ---
          APPOPTIONS__WEBSOCKET__PORT=${{ vars.APPOPTIONS__WEBSOCKET__PORT }}
          # --- CORS ---
          APPOPTIONS__CORS__ALLOWEDORIGINS__0=${{ vars.APPOPTIONS__CORS__ALLOWEDORIGINS__0 }}
          APPOPTIONS__CORS__ALLOWEDORIGINS__1=${{ vars.APPOPTIONS__CORS__ALLOWEDORIGINS__1 }}
          # --- Email ---
          APPOPTIONS__EMAIL__HOST=${{ vars.APPOPTIONS__EMAIL__HOST }}
          APPOPTIONS__EMAIL__PORT=${{ vars.APPOPTIONS__EMAIL__PORT }}
          APPOPTIONS__EMAIL__SENDER=${{ vars.APPOPTIONS__EMAIL__SENDER }}
          APPOPTIONS__EMAIL__FROMEMAIL=${{ vars.APPOPTIONS__EMAIL__FROMEMAIL }}
          APPOPTIONS__EMAIL__SENDGRIDAPIKEY=${{ secrets.SENDGRID_API_KEY }}
          # --- Postgres ---
          APPOPTIONS__POSTGRES__HOST=${{ vars.APPOPTIONS__POSTGRES__HOST }}
          APPOPTIONS__POSTGRES__PORT=${{ vars.APPOPTIONS__POSTGRES__PORT }}
          APPOPTIONS__POSTGRES__DATABASE=${{ vars.APPOPTIONS__POSTGRES__DATABASE }}
          APPOPTIONS__POSTGRES__USERNAME=${{ secrets.APPOPTIONS__POSTGRES__USERNAME }}
          APPOPTIONS__POSTGRES__PASSWORD=${{ secrets.APPOPTIONS__POSTGRES__PASSWORD }}
          # --- Dragonfly ---
          APPOPTIONS__DRAGONFLY__HOST=${{ vars.APPOPTIONS__DRAGONFLY__HOST }}
          APPOPTIONS__DRAGONFLY__PORT=${{ vars.APPOPTIONS__DRAGONFLY__PORT }}
          APPOPTIONS__DRAGONFLY__ALLOWADMIN=${{ vars.APPOPTIONS__DRAGONFLY__ALLOWADMIN }}
          APPOPTIONS__DRAGONFLY__ABORTONCONNECTFAIL=${{ vars.APPOPTIONS__DRAGONFLY__ABORTONCONNECTFAIL }}
          # --- MQTT ---
          APPOPTIONS__MQTT__HOST=${{ vars.APPOPTIONS__MQTT__HOST }}
          APPOPTIONS__MQTT__MQTTPORT=${{ vars.APPOPTIONS__MQTT__MQTTPORT }}
          APPOPTIONS__MQTT__WEBSOCKETPORT=${{ vars.APPOPTIONS__MQTT__WEBSOCKETPORT }}
          APPOPTIONS__MQTT__USERNAME=${{ secrets.APPOPTIONS__MQTT__USERNAME }}
          APPOPTIONS__MQTT__PASSWORD=${{ secrets.APPOPTIONS__MQTT__PASSWORD }}
          # --- JWT ---
          APPOPTIONS__JWT__SECRET=${{ secrets.APPOPTIONS__JWT__SECRET }}
          APPOPTIONS__JWT__EXPIRATIONMINUTES=${{ vars.APPOPTIONS__JWT__EXPIRATIONMINUTES }}
          APPOPTIONS__JWT__ISSUER=${{ vars.APPOPTIONS__JWT__ISSUER }}
          APPOPTIONS__JWT__AUDIENCE=${{ vars.APPOPTIONS__JWT__AUDIENCE }}
          # --- Seq ---
          APPOPTIONS__SEQ__SERVERURL=${{ vars.APPOPTIONS__SEQ__SERVERURL }}
          APPOPTIONS__SEQ__APIKEY=${{ secrets.APPOPTIONS__SEQ__APIKEY }}
          # --- Zipkin --
          APPOPTIONS__ZIPKIN__ENDPOINT=${{ vars.APPOPTIONS__ZIPKIN__ENDPOINT }}
          EOL
          # --- Image Tags ---
          echo "SERVER_IMAGE_TAG=\"${{ needs.build-backend-image.outputs.server_image_ci_tag }}\"" >> .env
          echo "CLIENT_IMAGE_TAG=\"${{ needs.build-frontend-image.outputs.client_image_ci_tag }}\"" >> .env

      - name: Create Nginx .env file
        id: create-dotenv-nginx
        run: |
          cat > .env_nginx << EOL
          SERVER_NAME=${{ vars.DOMAIN_NAME }}
          API_SERVER_NAME=${{ vars.API_SERVER_NAME }} 
          SSL_CERT_PATH=/etc/ssl/certs/nginx-selfsigned.crt
          SSL_KEY_PATH=/etc/ssl/private/nginx-selfsigned.key 
          EOL

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.SERVER_IP }}
          username: ${{ vars.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "docker-compose.yml,.env,.env_nginx,deploy/nginx/nginx.template.conf,db/migrations/**"
          target: ${{ vars.APP_DIR }}

      - name: Prepare server
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ vars.SERVER_IP }}
          username: ${{ vars.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            APP_DIR="${{ vars.APP_DIR }}"
            NGINX_CONFIG_VOL_PATH="${{ vars.NGINX_CONFIG_VOL_PATH }}"
            NGINX_CONTAINER_NAME="${{ vars.NGINX_CONTAINER_NAME }}"
            
            cd $APP_DIR
            set -a; source .env_nginx; set +a
            envsubst '${SERVER_NAME} ${API_SERVER_NAME}' < ./deploy/nginx/nginx.template.conf > ./nginx.staging.conf
            mkdir -p $NGINX_CONFIG_VOL_PATH
            cp ./nginx.staging.conf $NGINX_CONFIG_VOL_PATH/default.conf
            
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ vars.GHCR_USERNAME }} --password-stdin
            docker compose --env-file .env --profile deploy pull
            docker compose --profile deploy up -d --remove-orphans
            
            echo "Waiting briefly before reloading Nginx..."
            sleep 5
            docker compose exec $NGINX_CONTAINER_NAME nginx -s reload

  e2e-tests:
    name: Run E2E tests
    runs-on: ubuntu-latest
    needs: [ deploy-staging ]
    if: success() && (github.ref == 'refs/heads/master')
    timeout-minutes: 20
    strategy:
      matrix:
        browser: [ chromium, firefox, webkit ]
      fail-fast: false
    env:
      E2E_TEST_DIR: PlaywrightTests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          cache: true
          cache-dependency-path: ${{ env.E2E_TEST_DIR }}/packages.lock.json

      - name: Restore dependencies
        run: |
          cd ${{ env.E2E_TEST_DIR }}
          dotnet restore

      - name: Build project
        run: |
          cd ${{ env.E2E_TEST_DIR }}
          dotnet build --no-restore

      - name: Install Playwright browsers
        run: |
          cd ${{ env.E2E_TEST_DIR }}
          pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps ${{ matrix.browser }}

      - name: Run Playwright tests
        run: |
          cd ${{ env.E2E_TEST_DIR }}
          mkdir -p TestResults
          dotnet test \
            --logger "trx;LogFileName=TestResults-${{ matrix.browser }}.trx" \
            --logger "html;LogFileName=TestResults-${{ matrix.browser }}.html" \
            --results-directory "./TestResults"
        env:
          PLAYWRIGHT_TEST_BASE_URL: https://${{ vars.STAGING_DOMAIN_NAME }}
          BROWSER: ${{ matrix.browser }}

      - name: Generate test summary
        if: always()
        run: |
          cd ${{ env.E2E_TEST_DIR }}
          chmod +x ../.github/scripts/generate_test_summary.py
          python ../.github/scripts/generate_test_summary.py

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.browser }}-${{ github.sha }}
          path: ${{ env.E2E_TEST_DIR }}/TestResults
          retention-days: 30

  semantic-release:
    name: Semantic Versioning & Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    needs: [ e2e-tests, build-iot-firmware, build-backend-image, build-frontend-image ]
    if: success() && (github.ref == 'refs/heads/master')
    outputs:
      version: ${{ steps.semantic.outputs.version }}
      version_tag: ${{ steps.semantic.outputs.version_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate semantic version
        id: semantic
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          version_format: "${major}.${minor}.${patch}"
          bump_each_commit: false
          search_commit_body: false

      - name: Create and push git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ steps.semantic.outputs.version_tag }}
          git push origin ${{ steps.semantic.outputs.version_tag }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set lowercase repository name
        id: repo-name
        run: echo "REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Tag Docker images with release version
        run: |
          docker pull ${{ needs.build-backend-image.outputs.server_image_ci_tag }}
          docker tag ${{ needs.build-backend-image.outputs.server_image_ci_tag }} ghcr.io/${REPO_NAME}-backend:${{ steps.semantic.outputs.version }}
          docker tag ${{ needs.build-backend-image.outputs.server_image_ci_tag }} ghcr.io/${REPO_NAME}-backend:latest
          docker push ghcr.io/${REPO_NAME}-backend:${{ steps.semantic.outputs.version }}
          docker push ghcr.io/${REPO_NAME}-backend:latest

          docker pull ${{ needs.build-frontend-image.outputs.client_image_ci_tag }}
          docker tag ${{ needs.build-frontend-image.outputs.client_image_ci_tag }} ghcr.io/${REPO_NAME}-frontend:${{ steps.semantic.outputs.version }}
          docker tag ${{ needs.build-frontend-image.outputs.client_image_ci_tag }} ghcr.io/${REPO_NAME}-frontend:latest
          docker push ghcr.io/${REPO_NAME}-frontend:${{ steps.semantic.outputs.version }}
          docker push ghcr.io/${REPO_NAME}-frontend:latest

      - name: Get short SHA for artifact download
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV

      - name: Download SHA-tagged firmware artifact
        uses: actions/download-artifact@v4
        with:
          name: iot-firmware-${{ env.SHORT_SHA }}
          path: firmware-download

      - name: Upload firmware with semantic version
        uses: actions/upload-artifact@v4
        with:
          name: iot-firmware-${{ steps.semantic.outputs.version }}
          path: firmware-download/
          retention-days: 90

      - name: Create simple GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.semantic.outputs.version_tag }}
          release_name: ${{ steps.semantic.outputs.version }}
          body: |
            **Release ${{ steps.semantic.outputs.version }}**

            🐳 Docker Images:
            - Backend: `ghcr.io/${{ env.REPO_NAME }}-backend:${{ steps.semantic.outputs.version }}`
            - Frontend: `ghcr.io/${{ env.REPO_NAME }}-frontend:${{ steps.semantic.outputs.version }}`

            📱 IoT Firmware: `iot-firmware-${{ steps.semantic.outputs.version }}` (see artifacts)

          draft: false
          prerelease: false