name: CI/CD Pipeline

on:
  push:
    paths:
      - 'server/**'
      - 'Directory.Build.props'
      - '.github/**'
    branches:
      - '**'

jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install .NET tools
        run: |
          dotnet tool install -g dotnet-sonarscanner
          dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Initialize SonarQube analysis
        # Kan ikke køre SonarQube ordentlig på flere branches hvis man har Community Edition og Developer koster 500$ om året
        # SonarQube community kan heller ikke køre på PR
        if: (github.ref == 'refs/heads/master')
        env:
          SONARQUBE_PROJECT_KEY: ${{ vars.SONARQUBE_PROJECT_KEY }}
          SONARQUBE_SERVER: ${{ vars.SONARQUBE_SERVER }}
          SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_PR_NUMBER: ${{ github.event.pull_request.number || '' }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_BASE_REF: ${{ github.base_ref }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          chmod +x .github/scripts/sonarqube_config.py
          python .github/scripts/sonarqube_config.py

      - name: Cache NuGet packages
        uses: actions/cache@v4
        id: cache-nuget
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-v1-${{ hashFiles('**/nuget.config', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-v1-

      - name: Set up NuGet Authentication for GitHub Packages
        run: |
          echo "GITHUB_USERNAME=${{ github.actor }}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Run .NET tests
        run: |
          chmod +x .github/scripts/run_dotnet_tests.py
          python .github/scripts/run_dotnet_tests.py

      - name: Generate test summary
        if: always()
        run: |
          chmod +x .github/scripts/generate_test_summary.py
          python .github/scripts/generate_test_summary.py

      - name: Generate code coverage report
        if: always()
        run: |
          chmod +x .github/scripts/generate_coverage_report.py
          python .github/scripts/generate_coverage_report.py

      - name: Complete SonarQube analysis
        if: always() && (github.ref == 'refs/heads/master')
        run: |
          dotnet sonarscanner end \
          /d:sonar.token="${{ secrets.SONARQUBE_TOKEN }}"

      - name: Install Python dependencies # Skal bruges i 'Generate SonarQube Summary' for at hente data fra SonarQube server
        if: always() && (github.ref == 'refs/heads/master')
        run: pip install requests

      - name: Generate SonarQube Summary
        if: always() && (github.ref == 'refs/heads/master')
        env:
          SONARQUBE_SERVER: ${{ vars.SONARQUBE_SERVER }}
          SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONARQUBE_PROJECT_KEY: ${{ vars.SONARQUBE_PROJECT_KEY }}
        run: |
          chmod +x .github/scripts/generate_sonarqube_summary.py
          python .github/scripts/generate_sonarqube_summary.py

      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-report
          path: '**/TestResults/*.html'
          retention-days: 7

      - name: Upload code coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report
          retention-days: 7

  mutation-tests:
    strategy:
      matrix:
        include:
          - project_dir: 'server/Infrastructure.Data'
            project: 'Infrastructure.Data.csproj'
            test_project: '../tests/Infrastructure.Data.Tests/Infrastructure.Data.Tests.csproj'
          - project_dir: 'server/Infrastructure.Communication'
            project: 'Infrastructure.Communication.csproj'
            test_project: '../tests/Infrastructure.Communication.Tests/Infrastructure.Communication.Tests.csproj'
          - project_dir: 'server/Application'
            project: 'Application.csproj'
            test_project: '../tests/Application.Tests/Application.Tests.csproj'
          - project_dir: 'server/Core'
            project: 'Core.csproj'
            test_project: '../tests/Core.Tests/Core.Tests.csproj'
          - project_dir: 'server/Api.Mqtt'
            project: 'Api.Mqtt.csproj'
            test_project: '../tests/Api.Mqtt.Tests/Api.Mqtt.Tests.csproj'
          - project_dir: 'server/Api.Http'
            project: 'Api.Http.csproj'
            test_project: '../tests/Api.Http.Tests/Api.Http.Tests.csproj'
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install .NET tools
        run: |
          dotnet tool install -g dotnet-stryker 

      - name: Cache NuGet packages
        uses: actions/cache@v4
        id: cache-nuget
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-v1-${{ hashFiles('**/nuget.config', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-v1-

      - name: Set up NuGet Authentication for GitHub Packages
        run: |
          echo "GITHUB_USERNAME=${{ github.actor }}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Run Stryker mutation tests
        # Har ikke threshold med her for at kunne få summary
        # Men se sidste trin i dette som tjekker for om vi rammer 80%
        run: |
          PROJECT_DIR=$(dirname "${{ matrix.project }}")
          PROJECT_NAME=$(basename "${{ matrix.project_dir }}")
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          CORE_COUNT=$(nproc)
          echo "Detected $CORE_COUNT cores"
          SAFE_NAME=$(echo "${{ matrix.project }}" | tr '/' '_')
          OUTPUT_DIR="${GITHUB_WORKSPACE}/StrykerOutput_${SAFE_NAME}"
          echo "OUTPUT_DIR=${OUTPUT_DIR}" >> $GITHUB_ENV
          cd ${{ matrix.project_dir }}
          if [[ "$PROJECT_NAME" == "Api.Http" || "$PROJECT_NAME" == "Api.Mqtt" || "$PROJECT_NAME" == "Api.Websocket" ]]; then
            dotnet stryker \
            --project ${{ matrix.project }} \
            --test-project ${{ matrix.test_project }} \
            --test-project "../tests/Startup.Tests/Startup.Tests.csproj" \
            --output "${OUTPUT_DIR}" \
            --concurrency $CORE_COUNT \
            --config-file "${GITHUB_WORKSPACE}/stryker-config.json" \
            --reporter "json" \
            --reporter "html"
          else
            dotnet stryker \
            --project ${{ matrix.project }} \
            --test-project ${{ matrix.test_project }} \
            --output "${OUTPUT_DIR}" \
            --concurrency $CORE_COUNT \
            --config-file "${GITHUB_WORKSPACE}/stryker-config.json" \
            --reporter "json" \
            --reporter "html"
          fi | tee "${GITHUB_WORKSPACE}/stryker-output-${SAFE_NAME}.log"

      - name: Upload Stryker JSON report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mutation-json-report-${{ strategy.job-index }}
          path: ${{ env.OUTPUT_DIR }}/reports/mutation-report.json
          retention-days: 1 # Skal kun bruges til næste job

      - name: Upload Stryker HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: stryker-html-report-${{ env.PROJECT_NAME }}
          path: ${{ env.OUTPUT_DIR }}/reports/mutation-report.html
          retention-days: 7
  
  aggregate-mutation-results:
    runs-on: ubuntu-latest
    needs: mutation-tests
    if: always() # For at få overordnet summary tabel selvom en fejler
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all JSON reports
        uses: actions/download-artifact@v4
        with:
          pattern: mutation-json-report-*
          path: all-mutation-reports

      - name: List downloaded files
        run: ls -R all-mutation-reports

      - name: Aggregate reports and generate final summary
        id: aggregate
        run: |
          chmod +x .github/scripts/aggregate_mutation_summary.py
          python .github/scripts/aggregate_mutation_summary.py ./all-mutation-reports

      - name: Check final mutation threshold (80%)
        env:
          FINAL_MUTATION_SCORE: ${{ env.MUTATION_SCORE_FLOAT }}
        run: |
          echo "Checking final mutation score: $FINAL_MUTATION_SCORE%"
          if [[ -z "$FINAL_MUTATION_SCORE" ]]; then
            echo "::error::Could not determine final mutation score float value."
            exit 1
          fi
          if (( $(echo "$FINAL_MUTATION_SCORE < 80" | bc -l) )); then
            echo "::error::Overall Mutation score ($FINAL_MUTATION_SCORE%) is below threshold (80%)"
            exit 1
          else
            echo "Overall Mutation score ($FINAL_MUTATION_SCORE%) meets or exceeds threshold requirement (80%)"
          fi